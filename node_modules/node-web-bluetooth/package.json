{
  "_args": [
    [
      {
        "raw": "node-web-bluetooth",
        "scope": null,
        "escapedName": "node-web-bluetooth",
        "name": "node-web-bluetooth",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/agrsharm/Desktop/Udemy/The Complete Node.js Developer Course (2nd Edition)/beacon_integration"
    ]
  ],
  "_from": "node-web-bluetooth@latest",
  "_id": "node-web-bluetooth@0.0.8",
  "_inCache": true,
  "_location": "/node-web-bluetooth",
  "_nodeVersion": "9.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-web-bluetooth_0.0.8_1523459457225_0.3014517516982498"
  },
  "_npmUser": {
    "name": "ijzerenhein",
    "email": "hrutjes@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-web-bluetooth",
    "scope": null,
    "escapedName": "node-web-bluetooth",
    "name": "node-web-bluetooth",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/node-web-bluetooth/-/node-web-bluetooth-0.0.8.tgz",
  "_shasum": "ee01e1b4c8fbd645b3892515edd74fbff9c94fcc",
  "_shrinkwrap": null,
  "_spec": "node-web-bluetooth",
  "_where": "/Users/agrsharm/Desktop/Udemy/The Complete Node.js Developer Course (2nd Edition)/beacon_integration",
  "author": {
    "name": "IjzerenHein",
    "email": "hrutjes@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/IjzerenHein/node-web-bluetooth/issues"
  },
  "dependencies": {
    "colors": "^1.1.2",
    "keypress": "^0.2.1",
    "noble": "^1.9.1",
    "term-canvas": "^0.0.5"
  },
  "description": "Web Bluetooth API and interactive device picker for node.js",
  "devDependencies": {
    "babel-core": "^6.24.1",
    "babel-eslint": "^6.1.2",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-plugin-transform-async-to-generator": "^6.24.1",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-polyfill": "^6.23.0",
    "babel-preset-env": "^1.6.0",
    "babel-register": "^6.24.1",
    "chai": "^4.1.2",
    "eslint": "^3.19.0",
    "mocha": "^3.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-UnYU+6pmQAwxnMMGjdmb0PRHBbDwXi0jCq4bFM5l2wv/wm85uxoIt+jDpWE6KWhS0BIO62G26fTAHIMdECOHVQ==",
    "shasum": "ee01e1b4c8fbd645b3892515edd74fbff9c94fcc",
    "tarball": "https://registry.npmjs.org/node-web-bluetooth/-/node-web-bluetooth-0.0.8.tgz",
    "fileCount": 18,
    "unpackedSize": 39808
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "files": [
    "src",
    "cli"
  ],
  "gitHead": "3ec787f43f634fce7325a748ee5609b95dc15dfe",
  "homepage": "https://github.com/IjzerenHein/node-web-bluetooth#readme",
  "keywords": [
    "webbluetooth",
    "node-web-bluetooth",
    "web-bluetooth",
    "bluetooth-node",
    "node-bluetooth",
    "web-buetooth-node"
  ],
  "license": "MIT",
  "main": "src/Bluetooth.js",
  "maintainers": [
    {
      "name": "ijzerenhein",
      "email": "hrutjes@gmail.com"
    }
  ],
  "name": "node-web-bluetooth",
  "optionalDependencies": {},
  "readme": "![node-web-bluetooth logo](./node-web-bluetooth.png)\n[![Build Status](https://travis-ci.org/IjzerenHein/node-web-bluetooth.svg?branch=master)](https://travis-ci.org/IjzerenHein/node-web-bluetooth) [![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/IjzerenHein/node-web-bluetooth/master/LICENSE.txt)\n\nWeb Bluetooth API and interactive device picker for node.js, using the awesome [noble](https://github.com/sandeepmistry/noble) package\n\n## Installation\n\n\tnpm install node-web-bluetooth\n\t\nThis will automatically install [noble](https://github.com/sandeepmistry/noble). Depending on your system environment and the tools installed, nobble may or may not work out of the box. Please visit [https://github.com/sandeepmistry/noble](https://github.com/sandeepmistry/noble) on how to install all the prerequisites for noble.\n\n## Usage\n\n```js\nconst Bluetooth\t= require('node-web-bluetooth');\n\nasync function connect() {\n\tconst device = await Bluetooth.requestDevice({\n\t\tfilters: [\n\t\t\t{services: ['heart_rate']}\n\t\t]\n\t});\n\tconst server = await device.connect();\n\tconst service = await server.getPrimaryService('heart_rate');\n\tconst char = await service.getCharacteristic('heart_rate_measurement');\n\tawait char.startNotifications();\n\tchar.on('characteristicvaluechanged', (data) => {\n\t\t// parse heart-rate data here\n\t});\n\t...\n\tawait char.stopNotifications();\n\tawait server.disconnect();\n}\nconnect();\n```\n\n![node-web-bluetooth-request-device](./node-web-bluetooth-request-device.gif)\n\n## Programmatically selecting a device\n\nBy default, `Bluetooth.requestDevice` shows an interactive list\nwith all the discovered devices it has found. To programmatically\ncontrol the selected device, you can pass in an instance of the `RequestDeviceDelegate` class.\n\n```js\nconst Bluetooth\t= require('node-web-bluetooth');\n\nclass SelectFirstFoundDevice extends Bluetooth.RequestDeviceDelegate {\n\n\t// Select first device found\n\tonAddDevice(device) {\n\t\tthis.resolve(device);\n\t}\n\tonUpdateDevice(device) {\n\t\t// Called whenever new advertisement data was received\n\t\t// for the device\n\t}\n\n\t// Time-out when device hasn't been found in 20 secs\n\tonStartScan() {\n\t\tthis._timer = setTimeout(() => {\n\t\t\tthis.reject(new Error('No device found'));\n\t\t}, 20000);\n\t}\n\tonStopScan() {\n\t\tif (this._timer) clearTimeout(this._timer);\n\t}\n}\n\nasync function connect() {\n\tconst device = await Bluetooth.requestDevice({\n\t\tfilters: [\n\t\t\t{services: ['heart_rate']}\n\t\t],\n\t\tdelegate: new SelectFirstFoundDevice()\n\t});\n\t...\n}\nconnect();\n```\n\n## Customizing the interactive device picker\n\nThe header-text and the formatting of the interactive device picker are customizable. To fully customize it, derive a class from it and override its methods.\n\n```js\nconst Bluetooth\t= require('node-web-bluetooth');\n\nconst device = Bluetooth.requestDevice({\n\tdelegate: new Bluetooth.InteractiveRequestDeviceDelegate({\n\t\theader: 'Set your custom header text here',\n\t\tformat: (device) => `${device.id} - ${device.name}`\n\t})\n});\n```\n\n## `navigator.bluetooth` compatibility\n\nIn order to achieve full code compatibility with browser code, `navigator.bluetooth` is injected into the global scope.\nIn case the `navigator` object already existed, it is \nextended with the `bluetooth` object. Causing this to work:\n\n```js\nrequire('node-web-bluetooth');\n\nnavigator.bluetooth.requestDevice({\n\t...\n});\n```\n\n# Work in progress...\n**node-web-bluetooth** is being built as you read this. Nearly all \nof the core API's are done but more testing is still needed. \nGo ahead and give it a try, and let us know if you run into any problems.\n\n- [x] Bluetooth.requestDevice()\n- [x] Bluetooth.getAvailability()\n- [x] Bluetooth.availabilitychanged\n- [ ] ~~Bluetooth.referringDevice~~ (not relevant)\n- [x] BluetoothDevice.id\n- [x] BluetoothDevice.name\n- [x] BluetoothDevice.gatt\n- [x] BluetoothDevice.uuids\n- [x] BluetoothDevice.gattserverdisconnected\n- [ ] BluetoothDevice.watchAdvertisements()\n- [ ] BluetoothDevice.advertisementreceived()\n- [x] BluetoothRemoteGATTServer.device\n- [x] BluetoothRemoteGATTServer.connected\n- [x] BluetoothRemoteGATTServer.connect()\n- [x] BluetoothRemoteGATTServer.disconnect()\n- [x] BluetoothRemoteGATTServer.getPrimaryService()\n- [x] BluetoothRemoteGATTServer.getPrimaryServices()\n- [x] BluetoothRemoteGATTService.uuid\n- [x] BluetoothRemoteGATTService.isPrimary\n- [x] BluetoothRemoteGATTService.device\n- [x] BluetoothRemoteGATTService.getCharacteristic()\n- [x] BluetoothRemoteGATTService.getCharacteristics()\n- [x] BluetoothRemoteGATTService.getIncludedService()\n- [x] BluetoothRemoteGATTService.getIncludedServices()\n- [ ] BluetoothRemoteGATTService.serviceadded\n- [ ] BluetoothRemoteGATTService.servicechanged\n- [ ] BluetoothRemoteGATTService.serviceremoved\n- [x] BluetoothRemoteGATTCharacteristic.service\n- [x] BluetoothRemoteGATTCharacteristic.uuid\n- [x] BluetoothRemoteGATTCharacteristic.properties\n- [x] BluetoothRemoteGATTCharacteristic.value\n- [x] BluetoothRemoteGATTCharacteristic.getDescriptor()\n- [x] BluetoothRemoteGATTCharacteristic.getDescriptors()\n- [x] BluetoothRemoteGATTCharacteristic.readValue()\n- [x] BluetoothRemoteGATTCharacteristic.writeValue()\n- [x] BluetoothRemoteGATTCharacteristic.startNotifications()\n- [x] BluetoothRemoteGATTCharacteristic.stopNotifications()\n- [x] BluetoothRemoteGATTCharacteristic.characteristicvaluechanged\n- [x] BluetoothRemoteGATTDescriptor.characteristic\n- [x] BluetoothRemoteGATTDescriptor.uuid\n- [x] BluetoothRemoteGATTDescriptor.value\n- [x] BluetoothRemoteGATTDescriptor.readValue\n- [x] BluetoothRemoteGATTDescriptor.writeValue\n- [x] Translate characteric names to UUIDs\n- [x] Translate descriptor names to UUIDs\n\n## Known issues\n\nDue to an implementation restriction in noble, calling `BluetoothRemoteGATTService.getCharacteristic(s)` multiple times doesn't work correctly. If you need to obtain multiple characterstics, then do it using a \nsingle call to `BluetoothRemoteGATTService.getCharacteristics`.\n\n## Resources\n\n- [https://webbluetoothcg.github.io/web-bluetooth](https://webbluetoothcg.github.io/web-bluetooth)\n- [https://github.com/WebBluetoothCG/demos](https://github.com/WebBluetoothCG/demos)\n- [https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API](https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API)\n\n## License\n\n[MIT](./LICENSE.txt)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/IjzerenHein/node-web-bluetooth.git"
  },
  "scripts": {
    "lint": "eslint src",
    "start": "cli/cli.js",
    "test": "mocha",
    "test2": "mocha --compilers js:babel-register --require babel-polyfill"
  },
  "version": "0.0.8"
}
